<project name="autodoc" default="all">

  <description>
    Generate documentation for a project and post it to the github pages for that project.
    (See the properties at the top of build.xml for info on how to customize it
    for different projects.)
  </description>

  <!-- set force to true to build and checkin even if the source hasn't changed -->
  <property name="force" value="false"/>

  <!-- Properties that are (potentially) redefined for each project that we document -->
  <property name="work-root-dir" value="../autodoc-work-area/clojure-contrib"/>
  <property name="src-dir" value="${work-root-dir}/src/"/>
  <property name="output-dir" value="${work-root-dir}/autodoc/"/>
  <property name="extra-doc" value="${src-dir}/doc"/>

  <!-- These properties are special-cased when we're documenting clojure
       contrib itself -->
	<property name="clojure-contrib-jar" location="${src-dir}/clojure-contrib-slim.jar"/>
	<property name="clojure-contrib-classes" location="${src-dir}/classes"/>

  <!-- Properties that define where various resources are that we need -->
	<property name="clojure-jar" location="../clojure/clojure.jar"/>
  <property name="enlive-src" location="../enlive/src"/>
  <property name="tagsoup-jar" location="/home/tom/.clojure/tagsoup-1.2.jar"/>
	<property name="clojure-json-jar" location="${user.home}/.clojure/clojure-json.jar"/>
  <property name="ant-jar" location="/usr/share/ant/lib/ant.jar"/>
  <property name="ant-launcher-jar" location="/usr/share/ant/lib/ant-launcher.jar"/>
  <property name="doc-tmp" value="/tmp/autodoc"/>

  <!-- Tasks for running git and deciding if we have to do work -->
  <target name="pull-src"
          description="do a git pull origin master of the project source">
    <exec executable="git" dir="${src-dir}">
      <arg value="pull"/>
      <arg value="origin"/>
      <arg value="master"/>
    </exec>
  </target>

  <target name="set-is-uptodate" depends="set-base-is-uptodate"
          description="Set the is-uptodate property">
    <condition property="is-uptodate">
      <equals arg1="${base-is-uptodate}" arg2="yes"/>
    </condition>
    <condition property="do-build">
      <or>
        <equals arg1="${base-is-uptodate}" arg2="no"/>
        <equals arg1="${force}" arg2="true"/>
      </or>
    </condition>
    <echo message="up-to-date?: ${base-is-uptodate}"/>
    <echo message="force?: ${force}"/>
  </target>

  <target name="set-base-is-uptodate" 
          description="run the external program and get back a yes or no">
    <exec executable="sh" outputproperty="base-is-uptodate">
      <arg value="./is-uptodate.sh"/>
      <arg value="${src-dir}"/>
    </exec>
  </target>

  <target name="update-last-commit" 
          description="update the last version that we ran autodoc on">
    <exec executable="sh">
      <arg value="./update-last.sh"/>
      <arg value="${src-dir}"/>
    </exec>
  </target>

  <target name="set-commit-hash" description="Set the current commit hash!">
    <exec executable="git" dir="${src-dir}" outputproperty="commit-hash">
      <arg value="rev-parse"/>
      <arg value="HEAD"/>
    </exec>
  </target>

  <target name="set-commit-comment" depends="set-commit-hash,set-is-uptodate"
          description="Create an appropriate commit comment for the HTML page checkin">
    <condition property="commit-comment"
               value="Updated documentation for commit ${commit-hash}"
               else="Manual (forced) documentation build for commit ${commit-hash}">
      <equals arg1="${base-is-uptodate}" arg2="no"/>
    </condition>
  </target>

  <target name="stage-new-api-files" description="Stage files for new namespaces">
    <exec executable="git" dir="${output-dir}">
      <arg value="add"/>
      <arg value="*-api.html"/>
    </exec>
  </target>

  <target name="stage-new-doc-files"
          description="Stage new files added to the extra doc directory">
    <exec executable="git" dir="${output-dir}">
      <arg value="add"/>
      <arg value="doc/*"/>
    </exec>
  </target>

  <target name="commit-html" depends="set-commit-comment,stage-new-doc-files,stage-new-api-files"
          description="Commit the rebuild HTML back to github">
    <exec executable="git" dir="${output-dir}">
      <arg value="commit"/>
      <arg value="-a"/>
      <arg value="-m${commit-comment}"/>
    </exec>
    <exec executable="git" dir="${output-dir}">
      <arg value="push"/>
      <arg value="origin"/>
      <arg value="gh-pages"/>
    </exec>
  </target>

	<target name="build-src"
          description="Build the project src files, using the per-project build file">
    <ant dir="${param-dir}" inheritAll="true"/>
	</target>

  <!-- Build the documention stored in the extra doc directory -->
  <target name="clean-doc"
          description="Delete existing doc files">
    <delete dir="${output-dir}/doc"/>
    <delete dir="${doc-tmp}/doc"/>
  </target>
    
  <target name="make-doc-directories"
          description="Make the output directories for doc files pulled from the source area">
    <!-- first make the temporary directory tree -->
    <apply executable="mkdir" verbose="true" force="true" addsourcefile="false"
           dest="${doc-tmp}/doc">
      <fileset dir="${extra-doc}"/>
      <mapper type="regexp" from="(.*)/[^/]+" to="\1"/>
      <arg value="-p"/>
      <targetfile/>
    </apply>
    <!-- now make the eventual targets in the output area -->
    <apply executable="mkdir" verbose="true" force="true" addsourcefile="false"
           dest="${output-dir}/doc">
      <fileset dir="${extra-doc}"/>
      <mapper type="regexp" from="(.*)/[^/]+" to="\1"/>
      <arg value="-p"/>
      <targetfile/>
    </apply>
  </target>

  <target name="build-markdown"
          description="Convert additional markdown files to HTML in the dest directory.">
    <apply executable="markdown" verbose="true" force="true">
      <fileset dir="${extra-doc}/" includes="**/*.markdown"/>
      <redirector>
        <outputmapper type="glob" from="*.markdown" to="${doc-tmp}/doc/*.html"/>
      </redirector>
    </apply>
  </target>
  
  <target name="build-extra-doc"
          depends="pull-src,clean-doc,make-doc-directories,build-markdown"
          description="Build the additional documentation that is in extra doc directories"/>
  
  <!-- build the html documentation itself -->
  <target name="clean-html-dir"
          description="Delete old API files before creating new ones">
    <delete>
      <fileset dir="${output-dir}" includes="*-api.html"/>
    </delete>
  </target>

  <target name="build-html" depends="set-commit-hash,clean-html-dir,build-extra-doc"
          description="Build the HTML documentation and check it in">
		<java classname="clojure.main"
          classpath="${clojure-jar}:${clojure-contrib-jar}:${clojure-contrib-classes}:${enlive-src}:${tagsoup-jar}:${clojure-json-jar}:." 
					fork="true" failonerror="true">
      <arg value="-e"/>
      <arg value="(use 'com.infolace.gen-docs.gen-docs) (gen-docs { :src-dir &quot;${src-dir}&quot; :output-dir &quot;${output-dir}&quot;)"/>
		</java>
  </target>


  <!-- roll-up targets -->
  <target name="commit-result" depends="set-commit-comment,commit-html,update-last-commit"/>
    
  <target name="do-build" 
          depends="build-src,build-html,commit-result"
          description="once everything is up-to-date, build the source, build the html, then commit the new documentation"/>

  <target name="all" depends="pull-src, set-is-uptodate"
          if="do-build"
          description="Update the html on github based on the latest source, if appropriate">
    <antcall target="do-build"/>
  </target>

  <target name="ant-test" description="testing ant">
		<java classname="clojure.main"
          classpath="${clojure-jar}:${clojure-contrib-jar}:${clojure-contrib-classes}:${ant-jar}:${ant-launcher-jar}:." 
					fork="true" failonerror="true">
      <arg value="-e"/>
      <arg value="(use 'com.infolace.gen-docs.ant-wrapper) (ant-wrapper &quot;${param-dir}&quot; &quot;${build-target}&quot;)"/>
		</java>
  </target>

  <target name="null"><echo message="exec null target. src-dir = ${src-dir}"/></target>

  <!-- 
       Testing targets - should be deleted later
  -->

  <target name="jc-test">
    <javac srcdir="." destdir="." includeJavaRuntime="yes"
           debug="true" target="1.5"/>
  </target>

  <target name="test-if" if="has-target"><echo message="has-target true. target = ${target}"/></target>

  <target name="do-my-test">
    <property name="target-1" value=""/>
    <condition property="has-target"><not><equals arg1="${target-1}" arg2=""/></not></condition>
    <antcall target="test-if">
      <param name="target" value="${target-1}"/>
    </antcall>
  </target>
</project>



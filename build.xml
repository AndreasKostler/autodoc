<project name="contrib-autodoc" default="all">

  <description>
    Generate documentation for the current version of clojure-contrib and post it to 
    the google code wiki for the project.
  </description>

	<property name="clojure-jar" location="../clojure/clojure.jar"/>
	<property name="clojure-contrib-jar"
            location="../wiki-work-area/clojure-contrib/clojure-contrib-slim.jar"/>
	<property name="clojure-contrib-classes"
            location="../wiki-work-area/clojure-contrib/classes"/>
  <property name="enlive-src" location="../enlive/src"/>
  <property name="tagsoup-jar" location="/home/tom/.clojure/tagsoup-1.2.jar"/>
	<property name="clojure-json-jar" location="${user.home}/.clojure/clojure-json.jar"/>
  <property name="force" value="false"/>
  <property name="contrib-src-dir" value="../wiki-work-area/clojure-contrib/"/>
  <property name="output-dir" value="../wiki-work-area/wiki-src/"/>
  <property name="doc-tmp" value="/tmp/autodoc"/>

  <!-- Tasks for running git and deciding if we have to do work -->
  <target name="pull-contrib"
          description="do a git pull origin master of the contrib source">
    <exec executable="git" dir="${contrib-src-dir}">
      <arg value="pull"/>
      <arg value="origin"/>
      <arg value="master"/>
    </exec>
  </target>

  <target name="set-is-uptodate" depends="set-base-is-uptodate"
          description="Set the is-uptodate property">
    <condition property="is-uptodate">
      <equals arg1="${base-is-uptodate}" arg2="yes"/>
    </condition>
    <condition property="do-build">
      <or>
        <equals arg1="${base-is-uptodate}" arg2="no"/>
        <equals arg1="${force}" arg2="true"/>
      </or>
    </condition>
    <echo message="up-to-date?: ${base-is-uptodate}"/>
    <echo message="force?: ${force}"/>
  </target>

  <target name="set-base-is-uptodate" 
          description="run the external program and get back a yes or no">
    <exec executable="sh" outputproperty="base-is-uptodate">
      <arg value="./is-uptodate.sh"/>
      <arg value="${contrib-src-dir}"/>
    </exec>
  </target>

  <target name="update-last-commit" 
          description="update the last version that we ran autodoc on">
    <exec executable="sh">
      <arg value="./update-last.sh"/>
      <arg value="${contrib-src-dir}"/>
    </exec>
  </target>

  <target name="set-commit-hash" description="Set the current commit hash!">
    <exec executable="git" dir="${contrib-src-dir}" outputproperty="commit-hash">
      <arg value="rev-parse"/>
      <arg value="HEAD"/>
    </exec>
  </target>

  <target name="set-commit-comment" depends="set-commit-hash,set-is-uptodate"
          description="Create an appropriate commit comment for the HTML page checkin">
    <condition property="commit-comment"
               value="Updated documentation for commit ${commit-hash}"
               else="Manual (forced) documentation build for commit ${commit-hash}">
      <equals arg1="${base-is-uptodate}" arg2="no"/>
    </condition>
  </target>

  <target name="stage-new-api-files" description="Stage files for new namespaces">
    <exec executable="git" dir="${output-dir}">
      <arg value="add"/>
      <arg value="*-api.html"/>
    </exec>
  </target>

  <target name="stage-new-doc-files" description="Stage new files added to clojure-contrib/doc">
    <exec executable="git" dir="${output-dir}">
      <arg value="add"/>
      <arg value="doc/*"/>
    </exec>
  </target>

  <target name="commit-html" depends="set-commit-comment,stage-new-doc-files,stage-new-api-files"
          description="Commit the rebuild HTML back to github">
    <exec executable="git" dir="${output-dir}">
      <arg value="commit"/>
      <arg value="-a"/>
      <arg value="-m${commit-comment}"/>
    </exec>
    <exec executable="git" dir="${output-dir}">
      <arg value="push"/>
      <arg value="origin"/>
      <arg value="gh-pages"/>
    </exec>
  </target>

	<target name="build-contrib" 
					description="Update and, if necessary, build the contrib files">
    <ant dir="${contrib-src-dir}" inheritAll="false">
      <property name="clojure.jar" value="${clojure-jar}"/>
      <target name="clean"/>
      <target name="jar"/>
    </ant>
    <delete dir="${contrib-src-dir}/classes"/>
    <ant dir="${contrib-src-dir}" inheritAll="false">
      <property name="clojure.jar" value="${clojure-jar}"/>
      <target name="compile_classes"/>
    </ant>
    <!-- the following deletes are to hack around clojure issue 130 -->
    <delete>
      <fileset dir="${contrib-src-dir}/classes" includes="**/jmx*.class"/>
    </delete>
    <delete dir="${contrib-src-dir}/classes/clojure/contrib/jmx"/>
	</target>

  <!-- Build the documention stored in clojure-contrib/doc/... -->
  <target name="clean-doc"
          description="Delete existing doc files">
    <delete dir="${output-dir}/doc"/>
    <delete dir="${doc-tmp}/doc"/>
  </target>
    
  <target name="make-doc-directories"
          description="Make the output directories for doc files pulled from the source area">
    <!-- first make the temporary directory tree -->
    <apply executable="mkdir" verbose="true" force="true" addsourcefile="false"
           dest="${doc-tmp}/doc">
      <fileset dir="${contrib-src-dir}/doc"/>
      <mapper type="regexp" from="(.*)/[^/]+" to="\1"/>
      <arg value="-p"/>
      <targetfile/>
    </apply>
    <!-- now make the eventual targets in the output area -->
    <apply executable="mkdir" verbose="true" force="true" addsourcefile="false"
           dest="${output-dir}/doc">
      <fileset dir="${contrib-src-dir}/doc"/>
      <mapper type="regexp" from="(.*)/[^/]+" to="\1"/>
      <arg value="-p"/>
      <targetfile/>
    </apply>
  </target>

  <target name="build-markdown"
          description="Convert additional markdown files to HTML in the dest directory.">
    <apply executable="markdown" verbose="true" force="true">
      <fileset dir="${contrib-src-dir}/doc" includes="**/*.markdown"/>
      <redirector>
        <outputmapper type="glob" from="*.markdown" to="${doc-tmp}/doc/*.html"/>
      </redirector>
    </apply>
  </target>
  
  <target name="build-contrib-doc"
          depends="pull-contrib,clean-doc,make-doc-directories,build-markdown"
          description="Build the additional documentation that is in clojure-contrib/doc"/>
  
  <!-- build the html documentation itself -->
  <target name="clean-html-dir"
          description="Delete old API files before creating new ones">
    <delete>
      <fileset dir="${output-dir}" includes="*-api.html"/>
    </delete>
  </target>

  <target name="build-html" depends="set-commit-hash,clean-html-dir,build-contrib-doc"
          description="Build the HTML documentation and check it in">
		<java classname="clojure.main"
          classpath="${clojure-jar}:${clojure-contrib-jar}:${clojure-contrib-classes}:${enlive-src}:${tagsoup-jar}:${clojure-json-jar}:." 
					fork="true" failonerror="true">
      <arg value="-e"/>
      <arg value="(use 'com.infolace.gen-docs.gen-docs) (gen-docs &quot;${commit-hash}&quot;)"/>
		</java>
  </target>


  <!-- roll-up targets -->
  <target name="commit-result" depends="set-commit-comment,commit-html,update-last-commit"/>
    
  <target name="do-build" 
          depends="build-contrib,build-html,commit-result"
          description="once everything is up-to-date, build the source, build the html, then commit the new documentation"/>

  <target name="all" depends="pull-contrib, set-is-uptodate"
          if="do-build"
          description="Update the html on github based on the latest source, if appropriate">
    <antcall target="do-build"/>
  </target>

</project>
